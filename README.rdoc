== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

rake db:schema:load



enter.erb

<div class="row tab-row">
  <div class="col-md-4 col-md-offset-4">
    <div id="enter-tabs-container">
      <ul id="enter-tabs" class="nav nav-tabs" data-tabs="tabs">
          <li class="active"><a href="#login-tab" data-toggle="tab">Iniciar sesi√≥n</a></li>
          <li><a href="#register-tab" data-toggle="tab">Registrarse</a></li>
      </ul>
      
      <div id="enter-tabs-content" class="tab-content">
          <div class="tab-pane active" id="login-tab">
            <h4>O entra con: </h4>
            <%= form_tag(:controller => "users", :action => "newgplus", :method => "post") do %>
              <%= hidden_field_tag :fullname %>
              <%= hidden_field_tag :email %>
            <% end %>
            <span id="signinButton">
              <span
                class="g-signin"
                data-callback="signinCallback"
                data-clientid="729914167073-i3fgamviu9uv8ibmaopstgv1e2nu53fu.apps.googleusercontent.com"
                data-cookiepolicy="single_host_origin"
                data-scope="https://www.googleapis.com/auth/plus.login">
              </span>
            </span>
          </div>
          <div class="tab-pane" id="register-tab">
            <h2>holito2</h2>
          </div>
      </div>
    </div>
  </div>
</div>


  def setup
      @user = User.new(username: "alberticopai", email: "alberticopai@gmail.com", password: "password")
  end

  test 'user should be valid' do
    assert @user.valid?
  end

	test 'username should be valid' do
		@user.username = ""
		assert_not @user.valid?
	end
	
	test 'username length should not be too long' do
		@user.username = "a" * 31
		assert_not @user.valid?
	end
	
	test 'username length should not be too short' do
		@user.username = "aaaa"
		assert_not @user.valid?
	end
	
	test 'username should be unique' do
	    dup_user = @user.dup
	    dup_user.username = @user.username.upcase
	    @user.save
	    assert_not dup_user.valid?
	end
	
	test 'email should be valid' do
	    @user.email = ""
	    assert_not @user.valid?
	end
	
	test 'email length should be valid' do
	    @user.email = "a" * 101 + "@example.com"
	    assert_not @user.valid?
	end
	
	test 'email should be unique' do
		dup_user = @user.dup
		dup_user.email = @user.email.upcase
		@user.save
		assert_not dup_user.valid?
	end
	
	test "email validation should accept valid addresses" do
		valid_addresses = %w[user@eee.com R_TDD-DS@eee.hello.org user@example.com first.last@eem.au laura+joe@monk.cm]
		valid_addresses.each do |va|
		  @user.email = va
		  assert @user.valid?, '#{va.inspect} should be valid'
		end
	end
	
	test "email validation should reject invalid addresses" do
		invalid_addresses = %w[user@example,com user_at_eee.org user.name@example. eee@i_am_.com foo@ee+aar.com]
		invalid_addresses.each do |ia|
		    @user.email = ia
		    assert_not @user.valid?, '#{ia.inspect} should be invalid'
		end
	end
